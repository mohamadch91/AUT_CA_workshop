
library ieee;
use ieee.std_logic_1164.all;
 
entity Carry_Look_Ahead is
  port (
    i1  	: in std_logic_vector(3 downto 0);
    i2		: in std_logic_vector(3 downto 0);
    result	: out std_logic_vector(4 downto 0)
    );
end Carry_Look_Ahead;
 
 
architecture rtl of Carry_Look_Ahead is
 
  component FA is
    port (
      A  : in  std_logic;
      B  : in  std_logic;
      Cin : in  std_logic;
      S   : out std_logic;
      Cout : out std_logic);
  end component FA;
 
  signal w_G : std_logic_vector(3 downto 0); -- Generate
  signal w_P : std_logic_vector(3 downto 0); -- Propagate
  signal w_C : std_logic_vector(4 downto 0); -- Carry
 
  signal w_SUM   : std_logic_vector(3 downto 0);
 
   
begin
   
  FULL_ADDER_BIT_0 : FA
    port map (
      A  => i1(0),
      B  => i2(0),
      Cin => w_C(0),
      S   => w_SUM(0),
      Cout => open
      );
 
  FULL_ADDER_BIT_1 : FA
    port map (
      A  => i1(1),
      B  => i2(1),
      Cin => w_C(1),
      S   => w_SUM(1),
      Cout => open
      );
 
  FULL_ADDER_BIT_2 : FA
    port map (
      A  => i1(2),
      B  => i2(2),
      Cin => w_C(2),
      S   => w_SUM(2),
      Cout => open
      );
   
  FULL_ADDER_BIT_3 : FA
    port map (
      A  => i1(3),
      B  => i2(3),
      Cin => w_C(3),
      S   => w_SUM(3),
      Cout => open
      );
 
  -- Create the Generate (G) Terms:  Gi=Ai*Bi
  w_G(0) <= i1(0) and i2(0);
  w_G(1) <= i1(1) and i2(1);
  w_G(2) <= i1(2) and i2(2);
  w_G(3) <= i1(3) and i2(3);
 
  -- Create the Propagate Terms: Pi=Ai+Bi
  w_P(0) <= i1(0) or i2(0);
  w_P(1) <= i1(1) or i2(1);
  w_P(2) <= i1(2) or i2(2);
  w_P(3) <= i1(3) or i2(3);
 
  -- Create the Carry Terms:
  w_C(0) <= '0'; -- no carry input
  w_C(1) <= w_G(0) or (w_P(0) and w_C(0));
  w_C(2) <= w_G(1) or (w_P(1) and w_C(1));
  w_C(3) <= w_G(2) or (w_P(2) and w_C(2));
  w_C(4) <= w_G(3) or (w_P(3) and w_C(3));
 
  -- Final Answer
  result <= w_C(4) & w_SUM;  -- VHDL Concatenation
   
end rtl;
